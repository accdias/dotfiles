# ~/.bash_functions
#
# a) function settitle
settitle () {
    echo -ne "\e]2;$@\a\e]1;$@\a";
}
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func () {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# alias cd=cd_func
#
# Display the actual date and time
now() {
    echo $(date "+%Y-%m-%d %H:%M:%S") - "$@"
}

# Display 16 ANSI colors
16colors() {
    #Background
    for bg in {40..47} {100..107} 49; do
    # Foreground
        for fg in {30..37} {90..97} 39; do
            # Formatting
            for attr in {0..7}; do
                # Print the result
                printf "\e[%d;%d;%dm ^[%d;%d;%dm \e[0m" $attr $bg $fg $attr $bg $fg
            done
            echo #Newline
        done
    done
}

# Display 256 bit ANSI colors
256colors() {
    for fgbg in 38 48; do # Foreground/Background
        # for color in {0..255}; do # Colors
        x=0
        echo -n " "
        for color in {16..201}; do # Colors
            # Display the color
            printf "\e[%s;5;%sm%0.3d\e[0m" $fgbg $color $color
            # Display 18 colors per lines
            (((x + 1) % 18)) || echo
            (((x + 1) % 6)) || echo -n " "
            ((x++))
        done
        echo # New line
    done
}

# Remove leading and trailing whitespace characters
# See: https://stackoverflow.com/a/3352015/6789321
trim() {
    local var="$*"
    # remove leading whitespace characters
    var="${var#"${var%%[![:space:]]*}"}"
    # remove trailing whitespace characters
    var="${var%"${var##*[![:space:]]}"}"
    echo -n "$var"
}

# Generate strong passwords
genpasswd() {
	local l=$1
       	[ -z $l ] && l=16
      	tr -dc A-Za-z0-9_#@ < /dev/urandom | head -c ${l} | xargs
}

# Set/unset proxy variables
setproxy() {
    if [ "$1" == "-" ]; then
        unset {{HTTP,HTTPS,FTP,SOCKS,NO}_PROXY,{http,https,ftp,socks,no}_proxy}
    else
        export {{HTTP,HTTPS,FTP,SOCKS}_PROXY,{http,https,ftp,socks}_proxy}=socks5h://$1
        export no_proxy='localhost; 172.31.254.*; 192.168.*'
    fi
}

bright() {
    local MAX=$(cat /sys/class/backlight/intel_backlight/max_brightness)
    local LEVEL=$((MAX/4))
    case $1 in
        -r|--reset)
        ;;
        -m|--movie)
            LEVEL=${MAX}
        ;;
        -b|--blank)
            LEVEL=0
        ;;
        *)
        ;;
    esac
    sudo dd status=none of=/sys/class/backlight/intel_backlight/brightness <<< ${LEVEL}
    unset MAX LEVEL
}

listports() {
    local host=${1:-127.0.0.1}
    local ports=$(nmap -p- --min-rate=1000 -T4 ${host} | awk 'BEGIN{FS="/";ORS=","}/^[0-9].*open/{print $1}')
    echo ${ports%,}
}

scanports() {
    local host=${1:-127.0.0.1}
    local ports=$(listports)
    nmap -sC -sV -p${ports} ${host}
}

certdates() {
    local a=$(openssl x509 -in ${1} -noout -startdate)
    local b=$(openssl x509 -in ${1} -noout -enddate)
    echo $(date +%Y%m%d --utc -d"${a/not*=}")-$(date +%Y%m%d --utc -d"${b/not*=}")
}
