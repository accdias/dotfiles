# ~/.bash_functions
#
# a) function settitle
settitle ()
{
   echo -ne "\e]2;$@\a\e]1;$@\a";
}
#
# b) function cd_func
# This function defines a 'cd' replacement function capable of keeping,
# displaying and accessing history of visited directories, up to 10 entries.
# To use it, uncomment it, source this file and try 'cd --'.
# acd_func 1.0.5, 10-nov-2004
# Petar Marinov, http:/geocities.com/h2428, this is public domain
# cd_func ()
# {
#   local x2 the_new_dir adir index
#   local -i cnt
#
#   if [[ $1 ==  "--" ]]; then
#     dirs -v
#     return 0
#   fi
#
#   the_new_dir=$1
#   [[ -z $1 ]] && the_new_dir=$HOME
#
#   if [[ ${the_new_dir:0:1} == '-' ]]; then
#     #
#     # Extract dir N from dirs
#     index=${the_new_dir:1}
#     [[ -z $index ]] && index=1
#     adir=$(dirs +$index)
#     [[ -z $adir ]] && return 1
#     the_new_dir=$adir
#   fi
#
#   #
#   # '~' has to be substituted by ${HOME}
#   [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
#
#   #
#   # Now change to the new dir and add to the top of the stack
#   pushd "${the_new_dir}" > /dev/null
#   [[ $? -ne 0 ]] && return 1
#   the_new_dir=$(pwd)
#
#   #
#   # Trim down everything beyond 11th entry
#   popd -n +11 2>/dev/null 1>/dev/null
#
#   #
#   # Remove any other occurence of this dir, skipping the top of the stack
#   for ((cnt=1; cnt <= 10; cnt++)); do
#     x2=$(dirs +${cnt} 2>/dev/null)
#     [[ $? -ne 0 ]] && return 0
#     [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
#     if [[ "${x2}" == "${the_new_dir}" ]]; then
#       popd -n +$cnt 2>/dev/null 1>/dev/null
#       cnt=cnt-1
#     fi
#   done
#
#   return 0
# }
#
# alias cd=cd_func
now() {
	echo $(date "+%Y-%m-%d %H:%M:%S") - "$@" >> $HOME/.now
}
16colors() {
    #Background
    for bg in {40..47} {100..107} 49; do
    # Foreground
        for fg in {30..37} {90..97} 39; do
            # Formatting
            for attr in 0 1 2 4 5 7 ; do
                # Print the result
                printf "\e[%d;%d;%dm ^[%d;%d;%dm \e[0m" $attr $bg $fg $attr $bg $fg
            done
            echo #Newline
        done
    done
}

256colors() {
    for fgbg in 38 48; do #Foreground/Background
        #for color in {0..255} ; do #Colors
        x=0
        echo -n " "
        for color in {16..201} ; do #Colors
            # Display the color
            printf "\e[%s;5;%sm%0.3d\e[0m" $fgbg $color $color
            #Display 18 colors per lines
            [ $(((x+1) % 18)) == 0 ] && echo
            [ $(((x+1) % 6)) == 0 ] && echo -n " "
            ((x++))
        done
        echo #New line
   done
}
