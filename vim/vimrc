" ~/.vim/vimrc
"
" Author: Antonio Dias <accdias@gmail.com>
"
set nocompatible                        " Use Vim defaults options

" This configuration uses UTF-8 encoding
set encoding=utf8 nobomb                " Display UTF-8 characters set
set fileencoding=utf8                   " Save files in UTF-8 enconding
scriptencoding utf8                     " Configuration file is in UTF-8

" Use the operating system clipboard by default
if has('clipboard')
    if has('unnamedplus')
        set clipboard^=unnamedplus
    else
        set clipboard^=unnamed
    endif
    set clipboard+=autoselect
endif

" Use truecolor
"set termguicolors
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"

" Default color scheme
" dnf install -y vim-jellybeans
colorscheme jellybeans

" Default color scheme for diff mode
if &diff
    " Set terminal to 16 colors mode
    "set t_Co=8
    " colorscheme desert
endif

" Display settings
set nowrap                              " dont wrap lines
set ruler                               " show cursor position in status bar
set scrolloff=2                         " 2 lines above/below cursor when scrolling
set showcmd                             " show typed command in status bar
set showmatch                           " show matching bracket
set matchtime=2                         " show matching bracket for 0.2 seconds
set matchpairs+=<:>                     " specially for html
set title                               " show file in titlebar
set visualbell                          " set visualbell and ...
set t_vb=                               " ...make it do nothing

" Better mark chars for list mode
set listchars+=tab:»-
set listchars+=trail:⋅
set listchars+=nbsp:⋅
set listchars+=space:⋅
set listchars+=extends:>
set listchars+=precedes:<

" Change the vertical split character
"set fillchars+=vert:┃
"set fillchars+=vert:┆
"set fillchars+=vert:┇
set fillchars+=vert:┊
"set fillchars+=vert:┋
"set fillchars+=vert:╎
"set fillchars+=vert:╏
"set fillchars+=vert:║

"set showbreak=¬                        " show line breaks
set shortmess=atI                       " Disable vim intro message
"set colorcolumn=75                     " Mark the right margin at column 75
set signcolumn=yes                      " Always shows the sign column
set number                              " Always shows line numbers
set relativenumber                      " Always Shows line offsets based on the current line
set cursorline                          " Highlight current line
"set cursorcolumn                       " Highlight current column

set path+=**                            " Make "find" search recursively

set wildmenu                            " completion with menu
set wildignore=*~
set wildignore+=eggs/**
set wildignore+=.git
set wildignore+=.svn
set wildignore+=*.bak
set wildignore+=*.egg-info/**
set wildignore+=*.exe
set wildignore+=*.o
set wildignore+=*.obj
set wildignore+=*.pyc
set wildignore+=*.py[co]
set wildignore+=*.swp

" Use spaces instead of tabs
set tabstop=8                           " See https://www.reddit.com/r/vim/wiki/tabstop
set softtabstop=4
set shiftwidth=4
set expandtab

" Autoindent settings
set autoindent
set smarttab

" Don't add empty newlines at the end of files
"set binary
"set noeol

set cm=blowfish2                        " Use a more secure encryption method (-X/+X)

set fileformat=unix                     " Unix end of line format

" Search tweaks
set ignorecase                          " case insensitive searching
set smartcase                           " but become case sensitive if you type uppercase characters
"set magic                              " change the way backslashes are used in search patterns
"set incsearch                          " Do incremental searching

"set lazyredraw                         " redraw only when we need to
"set esckeys                            " Allow cursor keys in insert mode
set backspace=indent,eol,start          " Allow backspacing over everything in insert mode
set ttyfast                             " Optimize for fast terminal connections
set history=2000                        " Keep 2000 lines of command line history

set modeline                            " Respect modelines embeded in buffers
"set noerrorbells                       " Disable error bells
set nostartofline                       " Don’t reset cursor to start of line when moving around.

set foldenable                          " enable folding
set foldlevelstart=10                   " open most folds by default
set foldnestmax=10                      " 10 nested fold max
"set foldmethod=indent                   " fold based on indent level
" space open/closes folds
nnoremap <space> za

" Centralize backups, swapfiles and undo history
if exists('&viminfo')
    set viminfo='20,\"150               " read/write a .viminfo with 150 registers max
    "set viminfofile=~/.vim/viminfo
endif
"set backup                             " keep a backup file
set backupdir=~/.vim/backup
set directory=~/.vim/swap
if exists('&undodir')
    set undodir=~/.vim/undo
endif

" Enable mouse just for visual selection mode
"if has('mouse')
"  set mouse=v
"endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has('gui_running')
    syntax on
    set hlsearch
endif

" Enable VIM 8+ builtin plugin system
if has('package')
    packloadall
    silent! helptags ALL
endif

" Expose trailing white spaces when entering/leaving insert mode
highlight default EOLWhiteSpaces ctermbg=red guibg=red
autocmd ColorScheme * highlight default EOLWhiteSpaces ctermbg=red guibg=red
autocmd InsertEnter * match EOLWhiteSpaces /\\\@<![\u3000[:space:]]\+\%#\@<!$/
autocmd InsertLeave * match EOLWhiteSpaces /\\\@<![\u3000[:space:]]\+$/

" Remap Leader key to comma
let mapleader=','
let maplocalleader=','

" Use <Leader>> and <Leader>< to page between buffers
noremap <silent><Leader>< :bp<cr>
noremap <silent><Leader>> :bn<cr>

" Use <Leader>s to sort a marked block
noremap <silent><Leader>s :sort<cr>

" Map ; to : and save a million keystrokes
nnoremap ; :

" Don't use Ex mode, use Q for formatting
noremap Q gq

" Join 6 lines
noremap <silent>1 :j6<cr><down>

" Toggle booleans
noremap <silent><leader>h :set hlsearch!<cr>
noremap <silent><leader>l :set list!<cr>
noremap <silent><leader>n :set number!<cr>
noremap <silent><leader>p :set paste!<cr>
noremap <silent><leader>w :set wrap!<cr>

" Sum a selection of numbers
noremap <silent><leader>s :echo eval(substitute(substitute(@0, '[^0-9]\+', '+', 'g'), '+$', '', 'g'))<cr>

" Reindent the entire file
noremap <silent><leader>r gg=G<C-o><C-o>

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" Autoclose tags
" inoremap ( ()<left>
" inoremap [ []<left>
" inoremap { {}<left>
" inoremap " ""<left>
" inoremap ' ''<left>
" inoremap ` ``<left>

" User Ctrl-arrow keys to switch between splits
noremap <c-up> <c-w>k
noremap <c-down> <c-w>j
noremap <c-right> <c-w>l
noremap <c-left> <c-w>h

" Move line up and down
nnoremap <silent><leader><up> :m-2<cr>==
nnoremap <silent><leader><down> :m+<cr>==

" User Ctrl-a to select all text
noremap <c-a> ggVG

" Load ~/.vim/skel/<extension> for filename.<extension> files
let g:template_skel_file=globpath(&rtp, 'skel/' . tolower(expand('%:e')))
if filereadable(g:template_skel_file)
    map ,,, :0read `=g:template_skel_file`<cr>G
endif

" Enable file type automatic detection.
filetype plugin indent on

" Only do this part when compiled with support for autocommands.
if has('autocmd')
    augroup markdown_tweaks
        autocmd FileType markdown
            \ setlocal textwidth=75 foldlevel=2
        autocmd FileType markdown
            \ let g:markdown_folding=1
        " Align GitHub-flavored Markdown tables
        autocmd FileType markdown vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>
    augroup END

    augroup python_tweaks
        autocmd FileType python
            \ let &makeprg='pylint-3 --output-format=text --msg-template="{path}:{line}:{column}:{C}: [{symbol}] {msg}" --reports=no %'
    augroup END

    augroup formats
        autocmd!
        " Text files with textwidth set to 78 characters
        " and spell checking
        autocmd FileType text
            \ setlocal textwidth=75 spell
       " Defaults for some languages
        autocmd FileType tex,xslt,xml,css,html,xhtml,javascript,docbook,json
            \ set softtabstop=2 shiftwidth=2
    augroup END

    " Poor man's template system: replace some predefined @VAR@
"    augroup templates
"        autocmd!
"        autocmd BufReadPost * silent! %s/@FILENAME@/\=expand('<afile>:t')/ge
"        autocmd BufReadPost * silent! %s/@FILETYPE@/\=&filetype/ge
"        autocmd BufReadPost * silent! %s/@ENCODING@/\=&encoding/ge
"        autocmd BufReadPost * silent! %s/@DAY@/\=strftime('%d')/ge
"        autocmd BufReadPost * silent! %s/@MONTH@/\=strftime('%m')/ge
"        autocmd BufReadPost * silent! %s/@YEAR@/\=strftime('%Y')/ge
"        autocmd BufReadPost * silent! %s/@TIME@/\=strftime('%H:%M:%S')/ge
"        autocmd BufReadPost * silent! %s/@ISODATE@/\=strftime('%F')/ge
"        autocmd BufReadPost * silent! %s/@FULLDATE@/\=strftime('%c')/ge
"    augroup END

    augroup movecursor
        " When opening a file, jump to the last known cursor position.
        autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
    augroup END

    augroup autotrim
        function AutoTrim()
          if !&binary && &filetype != 'diff'
            normal mZ
            %s/\s\+$//e
            normal `Z
          endif
        endfunction
        autocmd!
        " Remove trailing white spaces before saving
        autocmd BufWritePre * call AutoTrim()
    augroup END

    augroup reloadvimrc
        autocmd!
        " Reload configuration upon saving (from vimbits.com)
        autocmd! BufWritePost .vimrc source %
        autocmd! BufWritePost vimrc source %
    augroup END
endif " has("autocmd")

" Show difference between the current buffer and the file it was loaded from.
if !exists(':ShowDiff')
    command ShowDiff vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis
endif

" Abbreviations
iabclear
iabbrev #!a     #!/usr/bin/awk -f<cr>
iabbrev #!b     #!/bin/bash<cr>
iabbrev #!g     #!/usr/bin/gjs<cr>
iabbrev #!p     #!/usr/bin/env python3<cr># -*- coding: utf-8 -*-<cr># vim:ts=8:sts=4:sw=4:et<cr>
iabbrev #!u     # -*- coding: utf-8 -*-<cr>
iabbrev #!v     # vim:ts=8:sts=4:sw=4:et<cr>
iabbrev #!y     %YAML 1.2<cr>---<cr>

" Enable rainbow plugin features
" set to 0 if you want to enable it later via :RainbowToggle
let g:rainbow_active=1

" Airline settings
let g:airline_theme='purify'

let g:airline_mode_map = {
    \ '__'     : '-',
    \ 'c'      : 'C',
    \ 'i'      : 'I',
    \ 'ic'     : 'I',
    \ 'ix'     : 'I',
    \ 'n'      : 'N',
    \ 'multi'  : 'M',
    \ 'ni'     : 'N',
    \ 'no'     : 'N',
    \ 'R'      : 'R',
    \ 'Rv'     : 'R',
    \ 's'      : 'S',
    \ 'S'      : 'S',
    \ ''     : 'S',
    \ 't'      : 'T',
    \ 'v'      : 'V',
    \ 'V'      : 'V',
    \ ''     : 'V',
    \ }

if !exists('g:airline_symbols')
  let g:airline_symbols = {}
endif

" unicode symbols
"let g:airline_left_sep = '»'
"let g:airline_left_sep = '▶'
"let g:airline_right_sep = '«'
"let g:airline_right_sep = '◀'
"let g:airline_symbols.crypt = '🔒'
"let g:airline_symbols.linenr = '☰'
"let g:airline_symbols.linenr = '␊'
"let g:airline_symbols.linenr = '␤'
"let g:airline_symbols.linenr = '¶'
"let g:airline_symbols.maxlinenr = ''
"let g:airline_symbols.maxlinenr = '㏑'
"let g:airline_symbols.branch = '⎇'
"let g:airline_symbols.paste = 'ρ'
"let g:airline_symbols.paste = 'Þ'
"let g:airline_symbols.paste = '∥'
"let g:airline_symbols.spell = 'Ꞩ'
"let g:airline_symbols.notexists = 'Ɇ'
"let g:airline_symbols.whitespace = 'Ξ'

" powerline symbols
"let g:airline_left_sep = ''
"let g:airline_left_alt_sep = ''
"let g:airline_right_sep = ''
"let g:airline_right_alt_sep = ''
let g:airline_symbols.branch = ''
let g:airline_symbols.readonly = ''
let g:airline_symbols.linenr = '☰'
let g:airline_symbols.maxlinenr = 'L'
let g:airline_symbols.dirty='⚡'

" old vim-powerline symbols
"let g:airline_left_sep = '⮀'
"let g:airline_left_alt_sep = '⮁'
"let g:airline_right_sep = '⮂'
"let g:airline_right_alt_sep = '⮃'
"let g:airline_symbols.branch = '⭠'
"let g:airline_symbols.readonly = '⭤'
"let g:airline_symbols.linenr = '⭡'

" vim-ale settings
" See: https://flake8.pycqa.org/en/latest/user/error-codes.html
"let g:ale_python_flake8_options="--extend-ignore=E402"

" See: pylint --list-msgs-enabled
let g:ale_python_pylint_options="--disable=C0112,C0114,C0115,C0116"

" Do not show error messages inline
let g:ale_virtualtext_cursor=0

let g:ale_sign_column_always=1

let g:ale_sign_error='●'
let g:ale_sign_info='○'
let g:ale_sign_warning='●'
let g:ale_echo_msg_format='[%linter%] [%severity%] %s'

highlight link ALEErrorSign    Error
highlight link ALEWarningSign  Warning

" That's all, folks!
