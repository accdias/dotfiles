#!/usr/bin/env python
# -*- coding: @ENCODING@ -*-
"""
    Usage:
        @FILENAME@ [-h,--help] [-v,--verbose] [--version]
"""

from __future__ import print_function
import os
import sys
import re
import argparse

__author__ = 'Antonio Dias'
__email__ = 'accdias@gmail.com'
__copyright__ = 'Copyright @YEAR@, Antonio Dias'
__license__ = 'GPL'
__version__ = '0.1'
__status__ = 'Development'


# Global variables


# Class declarations
class Pizza:
    name = ''
    size = 0
    price = 0

    def __init__(self, name, size, price):
        self.name = name
        self.size = size
        self.price = price

    def area(self):
        return math.pi * math.pow(self.size / 2, 2)

    def awesomeness(self):
        if self.name == 'Carbonara':
            return 9000

        return self.size // int(self.price) * 100


# Function declarations
def main ():
    parser = argparse.ArgumentParser(description=__doc__)

    parser.add_argument(
        "input", nargs="?", default="-",
        metavar="INPUT_FILE", type=argparse.FileType("r"),
        help="path to the input file (read from stdin if omitted)")

    parser.add_argument(
        "output", nargs="?", default="-",
        metavar="OUTPUT_FILE", type=argparse.FileType("w"),
        help="path to the output file (write to stdout if omitted)")

    args = parser.parse_args()

    #if len(args) < 1:
    #    parser.error('missing argument')

    for line in args.input:
        print(line.strip(), file=args.output)


if __name__ == '__main__':
    try:
        main()
        sys.exit(0)
    except KeyboardInterrupt, e: # Ctrl-C
        raise e
    except SystemExit, e: # sys.exit()
        raise e
    except Exception, e:
        print('ERROR, UNEXPECTED EXCEPTION')
        print(str(e))
        os._exit(1)

# vim:ts=4:sts=4:sw=4:et